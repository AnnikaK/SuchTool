
(defun on-add-clicked (text)
  (let ((selection-list) (free-text-results '()) (keyword-results '()) (no-error nil) (total-results '()) (free-text-search-included nil))
    (setq selection-list (capi:choice-selected-items keyword-panel))
    (cond ((not (equal nil selection-list))

           (display-query selection-list text)
    ;free-text-search
           (cond ((member 'FREITEXT selection-list)
                  (setq free-text-search-included t)
                  (setq free-text-results (on-free-text-query-submitted text))
                  (setq selection-list (remove 'FREITEXT selection-list)))) ;(score docID)
           
    ;keyword-search
           (setq keyword-results (verarbeite-query selection-list text))

    ;get total result list for current query-term

           (setq keyword-results (mapcar (lambda (x) (list 1 x)) keyword-results))


           (cond (free-text-search-included
                  (if (equal (capi:choice-selected-item radio-buttons) button-and)
                      (setq total-results (merge-and keyword-results free-text-results))
                    (setq total-results (merge-or keyword-results free-text-results))))
                 (t (setq total-results keyword-results)))

           (cond ((and (> (length *results*) 0) (> (length total-results) 0) (equal (capi:choice-selected-item buttons-outer-term) and-outer-term)) ;connect with compplete query
                  (setq *results* (merge-and total-results *results*)))  
                 ((and (> (length *results*) 0) (> (length total-results) 0) (equal (capi:choice-selected-item buttons-outer-term) or-outer-term))
                  (setq *results* (merge-or total-results *results*)))
                 (t (setq *results* total-results))))

          (t (show-error)))))




(defun merge-and (a b)
  (let ((res '()) (all (list a b)) (smaller) (larger))
    (cond ((and (> (length a) 0) (> (length b) 0))
           (setq all (sort all '< :key 'length))
           (setq smaller (first all))
           (setq larger (second all))
           (mapcar (lambda (x)
                     (setq score (car (member (second x) larger :test '= :key 'second)))
                     (cond ((not (equal nil score)) 
                            (setq new-score (list (+ (car x) (car score)) (second x))) 
                            (setq res (cons new-score res))))) smaller)))
    res)) 



(defun merge-or (a b)
  (let ((res '()) (all (list a b)) (smaller) (larger))
           (cond ((and (> (length a) 0) (> (length b) 0))
                  (setq all (sort all '< :key 'length))
                  (setq smaller (first all))
                  (setq larger (second all))
                  (mapcar (lambda (x)
                            (setq score (car (member (second x) larger :test '= :key 'second)))
                            (cond ((not (equal nil score)) 
                                   (setq new-score (list (+ (car x) (car score)) (second x))) 
                                   (setq res (cons new-score res))
                                   (setq larger (remove larger b))))) smaller)
                  (setq res (append larger res))))
           res))


;(merge-and '((1 23) (1 234) (1 5)) '((0.2 23) (0.3 234) (0.23 13234)))
;(merge-or '((1 23) (1 234) (1 5)) '((0.2 23) (0.3 234) (0.23 13234)))



;TODO : pretty-print und editor-pane? Nice to have
 

;show query in display-panel (without any logic!!!)
(defun display-query (selection-list text)
  (let ((and t) (displayed-query) (tmp "") (before "") (middle "") (after ""))
    (cond ((equal (capi:choice-selected-item radio-buttons) button-or) (setq and nil))) 
    (setq displayed-query (capi:display-pane-text query-display))
    ;verknuepfung intern
    (cond ((> (length selection-list) 1)
           (if and (setq before " (and ") (setq before " (or "))
           (setq after ") ")))
    ;surround with not
    (cond ((equal '(not) (capi:choice-selected-items not-operator-panel))
           (setq before (concatenate 'string " (not " before))
           (setq after (concatenate 'string after ") "))))
    
     ;create bracket-expression for each keyword
    (mapcar (lambda (x) 
              (setq tmp (concatenate 'string " (= " (write-to-string x) " \""  text  "\") "))
              (setq middle (concatenate 'string middle tmp))) selection-list)
    (setq tmp (concatenate 'string before middle after))
    ;verknuepfung extern
    (cond ((> (length displayed-query) 0)
           (cond ((equal (capi:choice-selected-item buttons-outer-term) and-outer-term)(setq displayed-query (concatenate 'string "(AND " displayed-query)))
                 ((equal (capi:choice-selected-item buttons-outer-term) or-outer-term) (setq displayed-query (concatenate 'string "(OR " displayed-query))))
           (setq tmp (concatenate 'string tmp ")"))))

    (setf (capi:display-pane-text query-display) (concatenate 'string displayed-query tmp))))


(defun show (top)
  (let ((string-list '()) (tmp) (index (length top)) (score) (current-elem '()))
    (setq top (sort top '< :key 'car))
    (mapcar (lambda (x) 
                    (setq score (write-to-string (first x)))
                    (setq score (subseq score 0 (min (length score) 7)))
                    (setq tmp (list (concatenate 'string (write-to-string index) ".      ")
                                    score
                                    ""
                                    (namestring (document-path (gethash (second x) *documents*)))
                                    ""))
                    (setq string-list (cons tmp string-list))
                    (setq index (- index 1))) top)
    (show-results string-list)))





(defun show-results (result-list)
  (let  ((breite 1000))
   
    ;(setq breite (+ 30 (round (* 7.5 (reduce 'max (mapcar 'length show))))))
   
    (capi:display-dialog 
     (capi:make-container
 
      (make-instance 'capi:column-layout
                     :x-adjust  :left
                     :min-width breite
                     :background :white
                     :gap 20
                     :description
                     
                       
                     (list ""
                      (setq open-mode-panel (make-instance 
                       'capi:radio-button-panel
                       
                       :items (list 
                               (setq dir-button (make-instance 'capi:radio-button
                                              :text "Open directory"
                                              :selected nil
                                              :selection-callback 
                                              #'(lambda  (a interface &rest args) 
                                                  ())))
                               (setq file-button (make-instance 'capi:radio-button
                                              :text "Open file"
                                              :selected t
                                              :selection-callback 
                                              #'(lambda  (a interface &rest args) 
                                                  ()))))))
                      (make-instance 'capi:row-layout 
                                     :gap 20
                                     :description (list ""

                                                                    (make-instance 'capi:multi-column-list-panel
                                     
                                                                                   :visible-min-width 500
                                                                                   :visible-min-height :text-height
                                                                                   :vertical-scroll t
                                                                                   :horizontal-scroll t
                                                                                   :selection-callback 'result-selected
                                                                                   :columns '((:title "Rank"
                                                                                               :adjust :left
                                                                                               :width (character 10))
                                                                                              (:title "Score"
                                                                                               :adjust :left
                                                                                               :width (character 15))
                                                                                              (:title "Datum"
                                                                                               :adjust :left 
                                                                                               :visible-min-width (character 30))
                                                                                              (:title "Dateipfad"
                                                                                               :adjust :left 
                                                                                               :visible-min-width (character 70))
                                                                                              (:title "Absender"
                                                                                               :adjust :left 
                                                                                               :visible-min-width (character 60)))

                                                                                   :items result-list) "" ))
      
                      "" 
                     

                      (make-instance 'capi:row-layout
                                     :x-adjust  :center
                                     :min-width breite
                                     :description (list (make-instance
                                                         'capi:push-button
                                                         :text "OK"  
                                                         :callback-type :data
                                                         :callback 
                                                         #'(lambda (arg)  
                                                             (capi:exit-dialog arg))))))
      :min-width breite
      :background  :white
      )))))





(defun show-error ()
  (capi:display-dialog  
     (capi:make-container
      (make-instance 'capi:column-layout
                     :x-adjust  :center
                     :width 200
                     :description
                     (list 
                     
                           (make-instance 
                            'capi:row-layout :description 
                            (list "Please select at least one keyword!" ""))
                           (make-instance
                            'capi:push-button
                            :text "OK"  
                            :callback-type :data
                            :callback 
                            #'(lambda (arg)  
                                (capi:exit-dialog arg))))
      :min-width 200
      :background  :white
      ))))



(defun result-selected (&rest args)
  (let* ((selected (car args)) (path (fourth selected)))
    (cond ((equal (capi:choice-selected-item open-mode-panel) dir-button)
           (dir path))
          (t (datei-oeffnen path)))))


(defun dir (arg) (sys:call-system (concatenate 'string "explorer /select,"  "\"" arg "\"")))
(defun datei-oeffnen  (arg) (sys:call-system (concatenate 'string "\"" arg "\"")))


;(connect-and-total '(((0.2 15) (0.3 2)) ((0.2 4) (0.3 2))))
;(connect-or-total '(((0.2 15) (0.3 2)) ((0.2 4) (0.3 2))))




; (dir "C:\\testdatei.txt")

; (datei-oeffnen "C:\\testdatei.txt")
