(defvar *terms* (make-hash-table)) ;key is term, value is tuple (vector-index document-frequency)
(defvar *special-characters* '(#\# #\' #\" #\\ #\/))
(defvar *vocabulary* '())

(defun add-to-vocabulary (doc-text)
 (let ((words))
   (mapcar (lambda (x)
            (setq words (process-string x))
            (mapcar (lambda (y) 
                      (cond ((not (member y *vocabulary*)) (setq *vocabulary* (cons y *vocabulary*)))))
                    words))
          doc-text)))

(defun process-string (str) 
  (split-sequence:SPLIT-SEQUENCE #\Space  str :remove-empty-subseqs t))

(defun create-term-dictionary ()
  (let ((index 0) (term))
    (mapcar (lambda (x)
              ;(setq term (ignore-errors (read-from-string (delete-if (lambda (c) (member c *special-characters*)) x))))
                      (setq term x)
                      (print term)
                     (setf (gethash term *terms*) index)
                     (setq index (+ 1 index)))
              *vocabulary*)))
  
  
  